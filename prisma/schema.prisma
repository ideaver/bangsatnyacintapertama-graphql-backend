// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator fake_data {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated"
  reExport                              = Single
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

model User {
  id String @id @default(uuid())

  fullName String

  email String? @unique

  password String?

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  deletedAt DateTime? //implement softdelete

  //-------------------------- 1 relations --------------------------------

  role UserRole

  //-------------------------- m relations --------------------------------
  scannedQrs QrCode[]

  @@map("users")
}

enum UserRole {
  ADMIN
  SUPERUSER
  GUEST

  @@map("user_roles")
}

model Guest {
  id String @id @default(uuid())

  source String?

  invitationName String

  contactList String?

  whatsapp Float?

  category String?

  class String?

  seat String?

  studio String?

  showTime String?

  rejectionReason String?

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  deletedAt DateTime? //implement softdelete

  //-------------------------- 1 relations --------------------------------

  groupMemberOfId String?

  groupMemberOf Guest? @relation("GroupMembers", fields: [groupMemberOfId], references: [id])

  confirmationStatus ConfirmationStatus? @default(UNCONFIRMED)

  //-------------------------- m relations --------------------------------

  groupMembers Guest[] @relation("GroupMembers")

  qrcode QrCode?

  invitationImage InvitationImage?

  emailQueue EmailQueue[]

  whatsappQueue WhatsappQueue[]

  @@map("guests")
}

enum ConfirmationStatus {
  UNCONFIRMED
  CONFIRMED
  REJECTED

  @@map("confirmation_statuses")
}

enum QueueStatus {
  //Message is on Queue to be proceed
  QUEUE
  //Message is on process to be sent to the destination
  SENT
  //Message has been delivered
  DELIVERED
  //Message has been read on destination side
  READ
  //Message has been aborted and not going to be sent anymore
  ABORT
  //	Message is not sent. Issue may vary
  FAILED

  @@map("queue_statuses")
}

/// Batas Pengiriman 1000 email per hari
model EmailQueue {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  status QueueStatus @default(QUEUE)

  guestId String

  guest Guest @relation(fields: [guestId], references: [id])

  //-------------------------- m relations --------------------------------

  @@map("email_queues")
}

model WhatsappQueue {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  apiRequestId Int?

  //-------------------------- 1 relations --------------------------------

  status QueueStatus @default(QUEUE)

  guestId String

  guest Guest @relation(fields: [guestId], references: [id])

  //-------------------------- m relations --------------------------------

  @@map("whatsapp_queues")
}

model QrCode {
  id Int @id @default(autoincrement())

  path String

  scannedAt DateTime?

  createdAt DateTime @default(now())

  raceConditionValue Int @default(0)

  //-------------------------- 1 relations --------------------------------

  guestId String @unique

  guest Guest @relation(fields: [guestId], references: [id])

  scannedBy User? @relation(fields: [scannedByUserId], references: [id])

  scannedByUserId String?

  //-------------------------- m relations --------------------------------

  @@map("qrcodes")
}

model InvitationImage {
  id Int @id @default(autoincrement())

  path String

  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  guestId String @unique

  guest Guest @relation(fields: [guestId], references: [id])

  //-------------------------- m relations --------------------------------

  @@map("invitation_images")
}
